name: Rust CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  CARGO_TERM_COLOR: always

jobs:
  build-and-docs:
    runs-on: ubuntu-latest

    steps:
      # Checkout code
      - uses: actions/checkout@v4

      # Cache Cargo registry and git sources
      - name: Cache Cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
          key: cargo-registry-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-registry-${{ runner.os }}-

      # Cache Cargo build artifacts
      - name: Cache Cargo target directory
        uses: actions/cache@v3
        with:
          path: target
          key: cargo-target-${{ runner.os }}-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: cargo-target-${{ runner.os }}-

      # Install stable Rust for CI
      - name: Install stable Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy

      # Lint (excluding nightly feature)
      - name: Clippy check
        run: cargo clippy --all-targets --features std -- -D warnings

      # Run tests (excluding nightly feature)
      - name: Run tests
        run: cargo test --features std --verbose

      # Build crate & examples (excluding nightly feature)
      - name: Build crate
        run: cargo build --features std --verbose

      - name: Build examples
        run: cargo build --examples --verbose

      - name: Build with no-default-features
        run: cargo build --no-default-features --verbose

      # --- Docs.rs using nightly ---
      - name: Install nightly Rust
        uses: dtolnay/rust-toolchain@nightly

      - name: Install cargo-docs-rs
        uses: dtolnay/install@cargo-docs-rs

      - name: Build docs.rs documentation
        run: cargo docs-rs